\chapter{Orthogonal Arrays}

In this chapter we will explore the definition of an orthogonal array (OA), as
well as the statistical significance of OAs. We will then go on to demonstrate
practical construction techniques for OAs.

\section{Experiment Design}

Orthogonal arrays are closely tied to statistical experiment design. Many of the
terms used to describe and define orthogonal arrays in the literature are
conducive to a description of OAs in the context of scientific experiments. \\

Suppose we want to conduct an experiment to figure out the optimal method to
take care of a plant that sits by our window. The only variables we can control
are how much water we give the plant and how much sunlight it receives. We
would like to know the optimal levels of water and sunlight to give our plant in
order to keep it alive. \\

Let us define the variables here: levels of sunlight and levels of water. For
simplicity, let us say it is a binary choice and we can either give water/sunlight
or not. We can also call these variables \textbf{factors}, and state that there
are two factors we are considering in this experiment. For each of these
factors, we define two \textbf{levels}, which is the binary choice we referred
to earlier. For the factor water, the levels are: administering water and not
administering water. For the factor sunlight, the levels are: allowing the plant
to see sunlight and not allowing the plant to see sunlight. \\

Once we have our factors and levels figured out, we need to carry out a
number of trials of our experiment. We can call these trials \textbf{runs}, so
we ``run'' our experiment a number of times with different configurations of
factors and levels. \\

Now suppose that we want to figure out the most efficient way to test for the
optimal combination of sunlight and water levels with respect to the survival of
the plant. We could test every combination of factors and levels, which would
definitively tell us the effect of each factor on the dependent variable
(survival of the plant). This method also has a name: \textbf{full factorial
    design}. With an experiment utilizing full factorial design, we get a robust
route for experimentation at the expense of time. It is not a very efficient
method, since we have to try every combination of factors and levels to get our
results. \\

Orthogonal arrays attempt to provide a better way of tackling this issue by
testing different levels and factors in a more efficient manner. They do so by
creating arrays that can be used for experiment design, which aim to provide the
most optimal method of testing the effect of a factor on the outcome of an
experiment without needing to resort to the full factorial design. Often, it
will provide a way for us to design an experiment without needing to try every
combination of factors and levels. In fact, the full factorial design is
referred to as a degenerate case of an OA \citep{degenerate}.

\section[Definition]{Defining an Orthogonal Array}

Now that we have an intuition for the effective purpose and some of the
terminology used with orthogonal arrays, we can go on to formally define
orthogonal arrays. First, we need to define a very important term in the OA
literature: \textbf{strength}. The strength of an orthogonal array must be less
than or equal to the number of defined levels. If an orthogonal array has a
strength of $t$, it means that every $t$-tuple from the set of levels appears
exactly the same number of times across any $t$ factors. \\

In the example with the plant experiment, we had defined two levels. Let us
refer to them as 0 and 1, so the set that defines the levels is as follows: $\{
0, 1 \}$. If we have an orthogonal array with strength two, it means that we
will see the following tuples appear in the OA with the same frequency: $\{ (0,
0), (0, 1), (1, 0), (1, 1) \}$. The number of times we see the tuples appear in
the OA is referred to as the \textbf{index}. For the purposes of our research,
we are most interested in cases where the index is 1, also referred to as the
\textbf{unit index}. \\

Now that we have some an understanding of the defining terms of an orthogonal
array, we can provide a formal mathematical description. We denote an orthogonal
array as follows:

\begin{equation}
    OA(N, d, s, t, \lambda)
\end{equation}

\noindent
\begin{itemize}
    \item $N$: number of runs
    \item $d$: number of factors
    \item $s$: number of levels
    \item $t$: strength
    \item $\lambda$: index
\end{itemize}

\noindent
Note that the $\lambda$ term is often omitted because it can be inferred from
the other properties. If $\lambda$ is known, we can easily calculate $N$ as $N
= \lambda s^t$. It is also important to note that the symbols used to define
these terms are not entirely consistent across the literature, but the
properties themselves are fairly consistent. \\

The orthogonal array for the plant experiment we described earlier would be
described as $OA(4, 2, 2, 2, 1)$. We can also see what the OA actually looks
like on Figure~\ref{fig:oa-4-2-2-2-1}. \\

\begin{table}
\centering
\begin{tabular}{| c | c |}
    \hline
    0 & 0 \\
    \hline
    0 & 1 \\
    \hline
    1 & 0 \\
    \hline
    1 & 1 \\
    \hline
\end{tabular}
\caption[$OA(4, 2, 2, 2, 1)$]{An example of an $OA(4, 2, 2, 2, 1)$} \label{fig:oa-4-2-2-2-1}
\end{table}


Because the number of factors is so small, the resultant OA is a full factorial
design, which does not adequately show the power and advantage of using an OA.
Let us change the experiment slightly so we can understand why OAs are so
useful.  Suppose, in this case, everything about the experiment remains the
same, except now we have three levels: no sunlight/water, some sunlight/water,
and a lot of sunlight/water. We will represent this set of levels as $\{0, 1,
2\}$, so now $s = 3$. Let us add two more factors as well: fertilizer and
quality of soil, so now we have a total of 4 factors ($d=4$). We can see the
resulting OA in Table~\ref{fig:oa-9-4-3-2-1}. \\

\begin{table}
    \centering
    \begin{tabular}{| c | c | c | c |}
    \hline
    0 & 0 & 0 & 0 \\
    \hline
    0 & 1 & 1 & 1 \\
    \hline
    0 & 2 & 2 & 2 \\
    \hline
    1 & 0 & 1 & 2 \\
    \hline
    1 & 1 & 2 & 0 \\
    \hline
    1 & 2 & 0 & 1 \\
    \hline
    2 & 0 & 2 & 1 \\
    \hline
    2 & 1 & 0 & 2 \\
    \hline
    2 & 2 & 1 & 0 \\
    \hline
    \end{tabular}
    \caption[$OA(9, 4, 3, 2, 1)$]{An example of an $OA(9, 4, 3, 2, 1)$}
    \label{fig:oa-9-4-3-2-1}
\end{table}

\noindent
We have four factors and three levels, yet our experiment design only requires
nine runs. If we considered a full factorial design, we would require $4^3 = 64$
runs. Clearly, using this design would be far more efficient. We can also better
understand what a strength of two ($t = 2$) really means - take any two columns,
and in those columns, we will see that every two-tuple from the set $\{0, 1,
2\}$ appears exactly once. \\

Orthogonal arrays offer an efficient way to design experiments, optimizing for
the number of runs required to determine the significance of some number of
factors. This efficiency is been recognized and OAs are used for software
testing \citep{Pressman:2010:Software}, experiment design, and cryptography.

\section[Construction]{Orthogonal Array Construction Techniques}

A lot of the literature surrounding orthogonal arrays focuses more on existence
proofs of OAs with certain properties than practical (or even impractical) ways
to construct OAs. As useful as it is to know that these OAs exist and have these
great properties, we may also want to know how to actually produce one. We will
explore some construction techniques which provide an efficient algorithmic
method to create an OA.  Understanding these construction techniques will also
provide an understanding of the current limitations of orthogonal arrays with
respect to the constraints associated with these techniques.

\subsection[Bose]{The Bose Construction Technique}

First, we will explore the Bose construction technique, which can produce the
following orthogonal array

\begin{equation}
    OA(p^2, p + 1, p, 2, 1)\label{eq:bose-oa-construction}
\end{equation}

\noindent
where $p$ is a prime number \citep{Owen:2013:Monte}. Admittedly, this
construction is very limited in the regard that the orthogonal array must have a
prime squared number of runs and can only produce OAs of strength two. \\

Let us suppose that the OA is denoted as $A$, and $A_{ij}$ is the number at the
$i^{th}$ row and $j^{th}$ column of $A$. We define the construction of column 0
as

\begin{equation}
    A_{i0} = \Bigl\lfloor \frac{(i - 1)}{p}
    \Bigr\rfloor\label{eq:bose-first-col-construction}
\end{equation}

\noindent
the construction of column 1 as

\begin{equation}
    A_{i1} = (i - 1) \bmod p\label{eq:bose-second-col-construction}
\end{equation}

\noindent
and the construction of the other columns as

\begin{equation}
    A_{ij} = A_{i1} + (j - 2) A_{i2} \quad \text{where $j > 1$} \label{eq:bose-other-col-construction}
\end{equation}

\noindent
noting that the construction of the other columns depends on the values from the
first two columns.

\subsection[Bush]{The Bush Construction Technique}

The Bush construction technique is a generalization of the Bose construction
technique that relaxes the constraint on the strength ($t$) and the constraint
on the number of runs associated with an OA. With the Bush construction, we can
construct the following OA \citep{Owen:2013:Monte}:

\begin{equation}
    OA(p^t, p + 1, p , t, 1)
\end{equation}

\noindent
While we still have the constraint of needing a prime ``base'', we can now have
an arbitrary strength, $t$, such that $ 1 \leq t < p$ \citep{Owen:2013:Monte}.
The number of runs, as a consequence, can be a somewhat arbitrary power of a
prime. It is still a big constraint, but less constricting than the Bose
construction. \\

The Bush construction relies on polynomials of the form \citep{Owen:2013:Monte}:

\begin{equation}
    \phi_i(x) = a_{i, t} x^{t - 1} + \cdots a_{i, 1} x + a_{i,
        0}\label{eq:bush-poly}
\end{equation}

\noindent
We construct these polynomials for every $i$ such that $ 0 \leq i < p^t$,
picking the coefficients so $i = \sum_{l = 0}^{t - 1} a_{i, l} p^l$
\citep{Owen:2013:Monte}. This is equivalent to taking a number, $x$, interpreting
it in base $p$, and recording the coefficients, (including leading zeroes) up to
degree $t$. Owen notes that we do not actually need to take this particular
polynomial, we simply need $p^t$ distinct polynomials, and interpreting the
index in base $p$ presents an easy way to do so. There are other ways of
creating distinct polynomials, which would allow for a base that is any power of
a prime, rather than a base that is just a prime. In order to do so, we must
utilize Galois field arithmetic to generate polynomials and perform the other
operations \citep{Owen:2013:Monte}. \\

Once we define the polynomials, we can construct the columns $j = 0 \cdots p -
1$ of the OA as such:

\begin{equation}
    A_{ij} = \phi_{i - 1}(j - 1) \bmod p\label{eq:bush-most-col-construction}
\end{equation}

\noindent
and construct the last column, $p$,

\begin{equation}
    A_{ip} = (i - 1) \bmod p\label{eq:bush-last-col-construction}
\end{equation}

\noindent
which is a special case \citep{Owen:2013:Monte}.
